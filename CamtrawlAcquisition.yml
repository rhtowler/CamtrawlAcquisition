
#  specify some general application settings
application:
    # Set the mode of collection.
    #
    # The Camtrawl platform defines one on/off cycle as a deployment. Traditionally, data from
    # a deployment would be written to a directory named after the date and time the system
    # was powered on. This works well when each on/off cycle is a separate deployment, such
    # as when a camera system is deployed on a net during a trawl. Data for that deployment
    # is contained within the single folder
    #
    # Recently there has been a need for long term deployments where the camera system
    # is turned on and off periodically to collects images. In these cases, the deployment is
    # not a single on/off event so it is not desirable to log data to a separate folder each time
    # the system is powered on.
    #
    # The output_mode can be used to specify how data are organized when collected to
    # support both of these use cases:
    #
    #    Set output_mode to "separate" to collect data in separate folders for each on/off
    #    cycle. This is the traditional Camtrawl behavior. In this case, output_path will define
    #    where these deployment folders will be written. For example, if output_path is set
    #    to c:\data, the application will create deployment folders below that like
    #    c:\data\D20210101-T120024
    #
    #    Set output_mode to "combined" to collect data in a single folders for each on/off
    #    cycle. In this case, output_path defines the single folder where all data will be written.
    #    When the system powers on in combined mode, it determines how many existing
    #    images have been collected, updates the image counter, and adds additional images
    #    to the specified directory.
    output_mode: separate

    #  Define the path to the directory where the data will be written. The data directories
    #  will automatically be created within this directory.
    output_path: C:/camtrawl/data

    #  specify the name of the SQLite image metadata database file.
    database_name: CamtrawlMetadata.db3

    # You can specify the log level
    log_level: DEBUG

    #  Set always_trigger_at_start to True to always start triggering when the application
    #  starts regardless of the system state. Normally the system will only start triggering
    #  in "deployed" mode. This can be enabled for testing. It can also be used to force the
    #  system to acquire on deck prior to deployment when the pressure sensor/switch fails.
    always_trigger_at_start: False


    #  Set shut_down_on_exit to True to have the application shut the computer down when the
    #  application exits. This is the normal behavior for a deployed camtrawl system. This
    #  can be disabled for testing.
    shut_down_on_exit:  False


controller:
    # The Camtrawl Controller is a hardware device that provides power, sensor data, on/off
    # control, and synchronized hardware triggering for the Camtrawl system. It is not
    # required to run this software.

    #  set this to True if you are using a Camtrawl controller
    use_controller: False

    #  the controller connects to the acquisition PC using a serial interface. Set the
    #  port the controller is connected to here. For Windows this will be something like
    #  "COM3". For Linux systems it will be something like "/dev/ttyUSB0"
    serial_port: COM3

    #  set the baud rate. The Arduino based Camtrawl Controller runs at 921600
    baud_rate: 921600

    strobe_pre_fire:  100

    # The Camtrawl Controller has two strobe trigger channels. Here you can set the
    # channel(s) that will be triggered when the camera acquires an image. Set
    # strobe_channel=1 to trigger channel 1, set strobe_channel=2 to trigger channel 2
    # and set strobe_channel=3 to trigger both. The correct setting depends on how
    # your strobes are connected to the controller.
    strobe_channel: 3




acquisition:

    # Specify the camera triggering rate in TRIGGERS PER SECOND. Note that the realized
    # acquisition rate for each camera may be affected by camera specific settings.
    trigger_rate: 1

    # Specify the number of triggers that should be generated by the application before
    # exiting. Set to -1 to trigger indefinitely. Note that the global trigger counter is used
    # when determining if the trigger limit has been met. Camera specific settings may
    # result in fewer images being recorded.
    trigger_limit: 100




server:
        start_server: False
        server_port: 7889
        server_interface: 0.0.0.0



sensors:

        #  if a sensor header is unknown, it will be logged as the default type.
        default_type: synchronous

        #  synchronous sensor data is cached when received and written to disk when
        #  the cameras are triggered and it is associated with an image number. List the
        #  headers here for sensor datagrams that should be logged as synchronous
        synchronous: [$OHPR]

        #  asynchronous sensor data is written to disk when received. List the
        #  headers here for sensor datagrams that should be logged as asynchronous
        asynchronous: [$CTCS,  $SBCS,  $IMUC,  $CTSV]

        #  synchronous_timeout specifies how long synced sensor data will be cached (in seconds.)
        synchronous_timeout: 5


# Define the individual camera parameters
cameras:
   # The default camera properties are applied if a specific camera entry
   # cannot be found. The "default" section is not required and can be
   # omitted to ensure that only specific cameras be utilized.
    default:
        # Specify the gain in dB - valid values depend on the camera used
        gain: 16

        # Specify the exposure in microseconds - valid values depend on the camera used
        exposure_us: 8000

        # Specify the camera label - this is written to the camera table in the metadata database
        # and can be used by downstream applications to help users identify the camera. For
        # example 'left' or 'right' for stereo systems.
        label: camera

        # Specify the rotation to be applied to the image before saving or emitting
        # values: none, cw90, cw180, cw270, fliplr, flipud
        rotation:  None

        #  Set trigger divider to control when this camera responds to a trigger signal.
        #  When this value divides evenly into the total number of triggers, this camera
        #  will be triggered.
        trigger_divider: 1

        #  Set the save image divider to control when this camera saves images it acquires.
        #  When this value divides evenly into the total number of triggers, this camera
        #  will save the image.
        save_image_divider: 1

        #  Specify how this camera will be triggered. Options are "Software" or "Hardware".
        #  If you specify "Hardware" triggering you must be using the Camtrawl controller
        #  or your own interface to the hardware trigger device.
        trigger_source: Software

        #  If the camera is hardware triggered, specify the controller "port" or IO line
        #  this camera is connected to. This is used to order the exposures in the call to
        #  the controller's trigger method.
        controller_trigger_port: 1

        # Set hdr_save_merged to True to save the merged HDR image to disk
        hdr_enabled: False

        # Set hdr_save_merged to True to save the merged HDR image to disk
        hdr_save_merged:  True

        # Set hdr_signal_merged to True to emit an imageData signal containing the merged HDR image data
        hdr_signal_merged:  False

        # The merge method can be:mertens, robertson or debevec
        # More information can be found in the OpenCV documentation
        #            mertens uses exposure fusion and is not a true "HDR" output
        hdr_merge_method:  mertens

        # HDR images can be saved as jpg, or
        hdr_save_format:  hdr

        hdr_response_file: None

        hdr_tonemap_gamma: 2.0
        hdr_tonemap_saturation: 1.0
        hdr_tonemap_bias: 0.85

        # hdr_settings defines the details of each HDR exposure
        hdr_settings:
            Image1:
                exposure: 1000
                gain: 15
             # set emit_signal to True to emit an imageData signal containing the Image1 exposure data
                emit_signal: False
             # set save_image to True to write the Image1 data to disk
                save_image:  True
            Image2:
                exposure: 2500
                gain: 15
                emit_signal: False
                save_image: True
            Image3:
                exposure: 5000
                gain: 20
                emit_signal: True
                save_image:  True
            Image4:
                exposure: 10000
                gain:  20
                emit_signal: False
                save_image:  True


        #  Specify if this camera should save still images.
        save_stills: False
        still_image_extension: .jpg
        jpeg_quality: 90
        image_scale: 100

        # Specify if this camera should save video files.
        save_video: True
        video_preset: h264
        video_scale:  100
        video_force_framerate: 1


    # You can specify properties to apply to specific cameras by creating an entry
    # using the camera name. Camera entries for cameras that aren't connected to
    # the system will be ignored. This is typically what you want to do for multi-camera
    # systems.

#    Chameleon3 CM3-U3-50S5M_16306616:
#        gain: 18
#        exposure_us: 1000
#        label: right
#
#    Blackfly BFLY-PGE-50S5M_17219622:
#        gain: 18
#        exposure_us: 1000
#        label: left


